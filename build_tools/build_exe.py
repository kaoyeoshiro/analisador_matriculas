#!/usr/bin/env python3
"""
Script para construir execut√°vel do Sistema de An√°lise de Matr√≠culas Confrontantes
Usa PyInstaller para criar um arquivo .exe distribu√≠vel
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def clean_build_dirs():
    """Remove diret√≥rios de build anteriores"""
    dirs_to_clean = ['build', 'dist', '__pycache__']
    for dir_name in dirs_to_clean:
        if os.path.exists(dir_name):
            shutil.rmtree(dir_name)
            print(f"‚úÖ Removido diret√≥rio: {dir_name}")

def create_exe():
    """Cria o execut√°vel usando PyInstaller"""
    
    print("üöÄ Iniciando constru√ß√£o do execut√°vel...")
    
    # Limpa builds anteriores
    clean_build_dirs()
    
    # Configura√ß√µes do PyInstaller
    pyinstaller_args = [
        'pyinstaller',
        '--onefile',  # Arquivo √∫nico
        '--windowed',  # Interface gr√°fica (sem console)
        '--name=Matriculas_Confrontantes_PGE_MS',  # Nome do execut√°vel
        '--add-data=matr√≠culas;matr√≠culas',  # Inclui pasta de PDFs exemplo
        '--hidden-import=PIL._tkinter_finder',  # Import impl√≠cito necess√°rio
        '--hidden-import=requests',
        '--hidden-import=matplotlib',
        '--hidden-import=fitz',  # PyMuPDF
        '--hidden-import=pdf2image',
        '--hidden-import=dotenv',
        '--collect-all=matplotlib',  # Coleta todos os arquivos do matplotlib
        '--collect-all=PIL',  # Coleta todos os arquivos do Pillow
        '--exclude-module=_tkinter',  # Exclui m√≥dulo problem√°tico
        '--debug=all',  # Debug para ver problemas
        '../main.py'
    ]
    
    try:
        print("üì¶ Executando PyInstaller...")
        result = subprocess.run(pyinstaller_args, check=True, capture_output=True, text=True)
        print("‚úÖ PyInstaller executado com sucesso!")
        
        # Verifica se o execut√°vel foi criado
        exe_path = Path('dist/Matriculas_Confrontantes_PGE_MS.exe')
        if exe_path.exists():
            size_mb = exe_path.stat().st_size / (1024 * 1024)
            print(f"üéâ Execut√°vel criado com sucesso!")
            print(f"üìÅ Localiza√ß√£o: {exe_path.absolute()}")
            print(f"üìè Tamanho: {size_mb:.1f} MB")
            
            # Cria pasta de distribui√ß√£o
            dist_folder = Path('distribuicao')
            dist_folder.mkdir(exist_ok=True)
            
            # Copia execut√°vel para pasta de distribui√ß√£o
            shutil.copy2(exe_path, dist_folder / 'Matriculas_Confrontantes_PGE_MS.exe')
            
            # Cria arquivo README para distribui√ß√£o
            readme_content = """# Analisador de Usucapi√£o com IA Visual - Matr√≠culas e Confrontantes (PGE-MS)

## Como usar:

1. Execute o arquivo: Matriculas_Confrontantes_PGE_MS.exe
2. Configure sua API Key do OpenRouter no campo correspondente
3. Adicione arquivos PDF de matr√≠culas usando o bot√£o "Adicionar PDFs/Imagens"
4. Clique em "Processar Todos" para analisar os documentos
5. Ap√≥s o processamento, forne√ßa feedback sobre a precis√£o dos resultados

## Requisitos:
- Windows 10/11
- Conex√£o com internet para API de IA
- API Key v√°lida do OpenRouter

## Configura√ß√£o inicial:
1. Obtenha uma API Key em: https://openrouter.ai/
2. Coloque a chave no campo "API Key" da interface

## Suporte:
Este sistema foi desenvolvido para a Procuradoria-Geral do Estado de Mato Grosso do Sul (PGE-MS)
para an√°lise automatizada de processos de usucapi√£o.

Vers√£o: 1.0.0
Data: Setembro 2025
"""
            
            with open(dist_folder / 'README.txt', 'w', encoding='utf-8') as f:
                f.write(readme_content)
            
            print(f"üì¶ Pasta de distribui√ß√£o criada: {dist_folder.absolute()}")
            print("\nüéØ PR√ìXIMOS PASSOS:")
            print("1. Configure o Google Forms seguindo o guia fornecido")
            print("2. Atualize as configura√ß√µes GOOGLE_FORM_CONFIG no c√≥digo")
            print("3. Reconstrua o execut√°vel ap√≥s configurar o formul√°rio")
            print("4. Distribua a pasta 'distribuicao' completa")
            
        else:
            print("‚ùå Execut√°vel n√£o foi encontrado!")
            
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro durante execu√ß√£o do PyInstaller:")
        print(f"Stdout: {e.stdout}")
        print(f"Stderr: {e.stderr}")
        return False
    
    return True

def create_installer_config():
    """Cria configura√ß√£o para Inno Setup (opcional)"""
    inno_script = """
[Setup]
AppName=Analisador de Usucapi√£o PGE-MS
AppVersion=1.0.0
AppPublisher=Procuradoria-Geral do Estado de MS
DefaultDirName={autopf}\\Matriculas Confrontantes PGE-MS
DefaultGroupName=PGE-MS
OutputDir=instalador
OutputBaseFilename=Setup_Matriculas_Confrontantes_PGE_MS
Compression=lzma
SolidCompression=yes
WizardStyle=modern

[Languages]
Name: "portuguese"; MessagesFile: "compiler:Languages\\BrazilianPortuguese.isl"

[Files]
Source: "distribuicao\\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs

[Icons]
Name: "{group}\\Analisador de Matr√≠culas"; Filename: "{app}\\Matriculas_Confrontantes_PGE_MS.exe"
Name: "{autodesktop}\\Analisador de Matr√≠culas PGE-MS"; Filename: "{app}\\Matriculas_Confrontantes_PGE_MS.exe"

[Run]
Filename: "{app}\\Matriculas_Confrontantes_PGE_MS.exe"; Description: "{cm:LaunchProgram,Analisador de Matr√≠culas}"; Flags: nowait postinstall skipifsilent
"""
    
    with open('setup_config.iss', 'w', encoding='utf-8') as f:
        f.write(inno_script)
    
    print("üìÑ Arquivo de configura√ß√£o do Inno Setup criado: setup_config.iss")

if __name__ == "__main__":
    print("üèóÔ∏è Build System - Analisador de Matr√≠culas Confrontantes")
    print("=" * 60)
    
    success = create_exe()
    
    if success:
        create_installer_config()
        print("\n‚úÖ Build conclu√≠do com sucesso!")
        print("\nPara criar um instalador profissional:")
        print("1. Instale o Inno Setup: https://jrsoftware.org/isinfo.php")
        print("2. Abra o arquivo: setup_config.iss")
        print("3. Compile para gerar o instalador")
    else:
        print("\n‚ùå Build falhou!")
        sys.exit(1)
