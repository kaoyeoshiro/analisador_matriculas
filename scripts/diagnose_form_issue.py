#!/usr/bin/env python3
"""
Diagn√≥stico avan√ßado do Google Forms
Identifica problemas espec√≠ficos que causam erro 400
"""
import os
import sys
import requests
import re
import json
from pathlib import Path
from datetime import datetime
from dotenv import load_dotenv

# Adiciona o diret√≥rio raiz ao path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# Carrega vari√°veis de ambiente
load_dotenv(project_root / ".env")

class GoogleFormsDiagnostic:
    def __init__(self):
        self.form_url = os.getenv("GOOGLE_FORM_URL", "")
        self.view_url = self.form_url.replace("/formResponse", "/viewform")

        # IDs corretos j√° confirmados
        self.fields = {
            "TIPO": "entry.579089408",
            "DESCRICAO": "entry.597505189",
            "MODELO": "entry.207190791",
            "TIMESTAMP": "entry.943393649",
            "VERSAO": "entry.1649732056"
        }

    def check_form_status(self):
        """Verifica se o formul√°rio est√° aceitando respostas"""
        print("üîç VERIFICANDO STATUS DO FORMUL√ÅRIO...")

        try:
            response = requests.get(self.view_url, timeout=15)
            html = response.text

            # Verifica sinais de que o formul√°rio n√£o aceita respostas
            closed_indicators = [
                "n√£o est√° aceitando respostas",
                "formul√°rio foi fechado",
                "form is no longer accepting responses",
                "responses are no longer being accepted",
                "Este formul√°rio n√£o aceita mais respostas"
            ]

            for indicator in closed_indicators:
                if indicator.lower() in html.lower():
                    print(f"‚ùå PROBLEMA ENCONTRADO: {indicator}")
                    return False

            # Verifica se h√° reCAPTCHA
            if "recaptcha" in html.lower():
                print("‚ö†Ô∏è  RECAPTCHA detectado - pode estar bloqueando envios autom√°ticos")

            # Verifica se requer login
            if "accounts.google.com" in html or "sign in" in html.lower():
                print("‚ö†Ô∏è  Formul√°rio pode exigir login Google")

            print("‚úÖ Formul√°rio parece estar aceitando respostas")
            return True

        except Exception as e:
            print(f"‚ùå Erro ao verificar formul√°rio: {e}")
            return False

    def extract_form_metadata(self):
        """Extrai metadados importantes do formul√°rio"""
        print("\nüîç EXTRAINDO METADADOS DO FORMUL√ÅRIO...")

        try:
            response = requests.get(self.view_url, timeout=15)
            html = response.text

            metadata = {}

            # Busca por FBzx (Facebook token)
            fbzx_match = re.search(r'"fbzx":"([^"]*)"', html)
            if fbzx_match:
                metadata['fbzx'] = fbzx_match.group(1)
                print(f"   FBzx token: {metadata['fbzx']}")

            # Busca por outros tokens importantes
            fvv_match = re.search(r'"fvv":"([^"]*)"', html)
            if fvv_match:
                metadata['fvv'] = fvv_match.group(1)
                print(f"   FVV token: {metadata['fvv']}")

            # Busca por configura√ß√µes do formul√°rio
            form_config_match = re.search(r'AF_initDataCallback.*?"data":\[(.*?)\]', html, re.DOTALL)
            if form_config_match:
                print("   ‚úÖ Configura√ß√£o do formul√°rio encontrada")

            return metadata

        except Exception as e:
            print(f"   ‚ùå Erro: {e}")
            return {}

    def test_with_browser_simulation(self):
        """Testa com simula√ß√£o completa de navegador"""
        print("\nüîç TESTANDO COM SIMULA√á√ÉO COMPLETA DE NAVEGADOR...")

        session = requests.Session()

        # Headers mais completos
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8',
            'Accept-Language': 'pt-BR,pt;q=0.9,en;q=0.8',
            'Accept-Encoding': 'gzip, deflate, br',
            'DNT': '1',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
            'Sec-Fetch-Dest': 'document',
            'Sec-Fetch-Mode': 'navigate',
            'Sec-Fetch-Site': 'same-origin',
            'Sec-Fetch-User': '?1',
            'Cache-Control': 'max-age=0'
        }

        try:
            # 1. Primeiro visita a p√°gina para estabelecer sess√£o
            print("   1. Visitando p√°gina do formul√°rio...")
            view_response = session.get(self.view_url, headers=headers)

            # 2. Extrai metadados necess√°rios
            metadata = self.extract_form_metadata_from_response(view_response.text)

            # 3. Prepara headers para POST
            post_headers = headers.copy()
            post_headers.update({
                'Content-Type': 'application/x-www-form-urlencoded',
                'Origin': 'https://docs.google.com',
                'Referer': self.view_url
            })

            # 4. Dados com metadados
            data = {
                self.fields["TIPO"]: "ERRO",
                self.fields["DESCRICAO"]: "Teste diagn√≥stico avan√ßado",
                self.fields["MODELO"]: "google/gemini-2.5-pro",
                self.fields["TIMESTAMP"]: datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                self.fields["VERSAO"]: "1.0.0"
            }

            # Adiciona metadados se encontrados
            data.update(metadata)

            print("   2. Enviando formul√°rio com metadados...")
            response = session.post(self.form_url, data=data, headers=post_headers, timeout=30)

            print(f"   Status: {response.status_code}")

            if response.status_code == 200:
                print("   ‚úÖ SUCESSO!")
                return True, response
            else:
                print("   ‚ùå Ainda erro 400")
                return False, response

        except Exception as e:
            print(f"   ‚ùå Erro: {e}")
            return False, None

    def extract_form_metadata_from_response(self, html):
        """Extrai metadados espec√≠ficos da resposta"""
        metadata = {}

        # Busca por campos hidden importantes
        hidden_patterns = [
            r'<input[^>]*name="([^"]*)"[^>]*type="hidden"[^>]*value="([^"]*)"',
            r'<input[^>]*type="hidden"[^>]*name="([^"]*)"[^>]*value="([^"]*)"'
        ]

        for pattern in hidden_patterns:
            matches = re.findall(pattern, html)
            for name, value in matches:
                if name not in ['fbzx', 'fvv', 'pageHistory', 'submissionTimestamp']:
                    continue
                metadata[name] = value

        return metadata

    def test_field_types_individually(self):
        """Testa cada tipo de campo individualmente para identificar problema"""
        print("\nüîç TESTANDO TIPOS DE CAMPO INDIVIDUALMENTE...")

        # Teste 1: Campo de m√∫ltipla escolha (TIPO)
        print("   Testando campo TIPO (m√∫ltipla escolha)...")
        result1 = self.test_single_value(self.fields["TIPO"], "ERRO")

        # Teste 2: Campo de texto longo (DESCRI√á√ÉO)
        print("   Testando campo DESCRI√á√ÉO (texto)...")
        result2 = self.test_single_value(self.fields["DESCRICAO"], "Teste")

        # Teste 3: Campo de texto curto (MODELO)
        print("   Testando campo MODELO (texto curto)...")
        result3 = self.test_single_value(self.fields["MODELO"], "teste")

        # Teste 4: Campo de data/hora
        print("   Testando campo TIMESTAMP (data)...")
        result4 = self.test_single_value(self.fields["TIMESTAMP"], "2025-09-18")

        # Teste 5: Campo de vers√£o
        print("   Testando campo VERS√ÉO (texto)...")
        result5 = self.test_single_value(self.fields["VERSAO"], "1.0.0")

        return [result1, result2, result3, result4, result5]

    def test_single_value(self, field_id, value):
        """Testa um √∫nico campo com um valor"""
        try:
            data = {field_id: value}
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                'Content-Type': 'application/x-www-form-urlencoded'
            }

            response = requests.post(self.form_url, data=data, headers=headers, timeout=15)
            success = response.status_code == 200

            print(f"      {field_id}: {response.status_code} ({'‚úÖ' if success else '‚ùå'})")
            return {'field': field_id, 'value': value, 'status': response.status_code, 'success': success}

        except Exception as e:
            print(f"      {field_id}: Erro - {e}")
            return {'field': field_id, 'value': value, 'status': 0, 'success': False, 'error': str(e)}

    def check_manual_submission(self):
        """Instrui como fazer um teste manual"""
        print("\nüîç TESTE MANUAL RECOMENDADO:")
        print("=" * 50)
        print("1. Abra o formul√°rio no navegador:")
        print(f"   {self.view_url}")
        print()
        print("2. Preencha os campos com:")
        print("   - Tipo: ERRO")
        print("   - Descri√ß√£o: Teste manual")
        print("   - Modelo: google/gemini-2.5-pro")
        print("   - Data: 2025-09-18")
        print("   - Vers√£o: 1.0.0")
        print()
        print("3. Envie o formul√°rio")
        print("4. Se funcionar manualmente, o problema √© com headers/cookies")
        print("5. Se n√£o funcionar, o formul√°rio tem restri√ß√µes")

    def suggest_alternatives(self):
        """Sugere alternativas se o Google Forms n√£o funcionar"""
        print("\nüí° ALTERNATIVAS SE O FORMS N√ÉO FUNCIONAR:")
        print("=" * 50)
        print("1. Usar Google Sheets API diretamente")
        print("2. Salvar feedback em arquivo local JSON")
        print("3. Enviar por email usando SMTP")
        print("4. Usar webhook para outro servi√ßo")
        print("5. Criar pr√≥prio endpoint para receber feedback")

    def run_complete_diagnostic(self):
        """Executa diagn√≥stico completo"""
        print("=" * 80)
        print("DIAGN√ìSTICO AVAN√áADO - GOOGLE FORMS ERROR 400")
        print("=" * 80)

        # 1. Verifica status do formul√°rio
        form_active = self.check_form_status()

        # 2. Extrai metadados
        metadata = self.extract_form_metadata()

        # 3. Testa com simula√ß√£o de navegador
        browser_success, browser_response = self.test_with_browser_simulation()

        # 4. Testa campos individualmente
        field_results = self.test_field_types_individually()

        # 5. An√°lise final
        print("\n" + "=" * 80)
        print("DIAGN√ìSTICO FINAL")
        print("=" * 80)

        if browser_success:
            print("‚úÖ SOLU√á√ÉO ENCONTRADA: Simula√ß√£o de navegador funcionou!")
            print("   Use os metadados extra√≠dos na requisi√ß√£o")
        elif not form_active:
            print("‚ùå PROBLEMA: Formul√°rio n√£o est√° aceitando respostas")
            print("   Verifique as configura√ß√µes do Google Forms")
        else:
            print("‚ùå PROBLEMA PERSISTENTE: Erro 400 em todos os testes")
            print("   Poss√≠veis causas:")
            print("   - reCAPTCHA ativo")
            print("   - Restri√ß√µes de dom√≠nio")
            print("   - Formul√°rio requer autentica√ß√£o")
            print("   - IDs dos campos mudaram")

        # 6. Instru√ß√µes para teste manual
        self.check_manual_submission()

        # 7. Alternativas
        self.suggest_alternatives()

        return browser_success

def main():
    """Fun√ß√£o principal"""
    try:
        diagnostic = GoogleFormsDiagnostic()
        success = diagnostic.run_complete_diagnostic()

        if success:
            print(f"\nüéâ Problema resolvido! Integre a solu√ß√£o no feedback_system.py")
        else:
            print(f"\n‚ö†Ô∏è Problema persiste. Considere implementar alternativa.")

    except Exception as e:
        print(f"‚ùå Erro no diagn√≥stico: {e}")

if __name__ == "__main__":
    main()